{{include 'Jobs/AbstractJob'}}
  stage: prepare
  script:
    - |-
      CI_COMMIT_DESCRIPTION=$(echo "$CI_COMMIT_DESCRIPTION" | xargs)
      echo "$CI_COMMIT_TITLE"
      echo "----------------"
      echo "$CI_COMMIT_DESCRIPTION"
      if [[ "$CI_COMMIT_TITLE" =~ ^mile ]] || [[ "$CI_COMMIT_DESCRIPTION" =~ ^mile ]] ;
      then
        UCI_VAR_VERSION_CHANGE="mile"
      elif [[ "$CI_COMMIT_TITLE" =~ ^feat ]] || [[ "$CI_COMMIT_DESCRIPTION" =~ ^feat ]] ;
      then
        UCI_VAR_VERSION_CHANGE="feat"
      elif [[ "$CI_COMMIT_TITLE" =~ ^fix ]] || [[ "$CI_COMMIT_DESCRIPTION" =~ ^fix ]];
      then
        UCI_VAR_VERSION_CHANGE="fix"
      else
        echo "No semantic version matches"
        exit 0
      fi
      UCI_VAR_PROJECT_SETTINGS_PATH=${UCI_CFG_PROJECT_PATH}/ProjectSettings/ProjectSettings.asset
      UCI_VAR_UNITY_BUNDLE_VERSION=$(awk 'match($0,/bundleVersion: [^ ]*/){ print substr($0, RSTART + 15, RLENGTH)}' < $UCI_VAR_PROJECT_SETTINGS_PATH)
      UCI_VAR_UNITY_BUNDLE_VERSION_FIX=$(awk -F'.' '{print $3}' <<< "$UCI_VAR_UNITY_BUNDLE_VERSION")
      UCI_VAR_UNITY_BUNDLE_VERSION_FEAT=$(awk -F'.' '{print $2}' <<< "$UCI_VAR_UNITY_BUNDLE_VERSION")
      UCI_VAR_UNITY_BUNDLE_VERSION_MILE=$(awk -F'.' '{print $1}' <<< "$UCI_VAR_UNITY_BUNDLE_VERSION")
      UCI_VAR_UNITY_BUNDLE_VERSION_FIX=${UCI_VAR_UNITY_BUNDLE_VERSION_FIX#0}
      UCI_VAR_UNITY_BUNDLE_VERSION_FEAT=${UCI_VAR_UNITY_BUNDLE_VERSION_FEAT#0}
      
      if [[ $UCI_VAR_VERSION_CHANGE == "mile" ]];
      then
        UCI_VAR_UNITY_BUNDLE_VERSION_NEW="$(($UCI_VAR_UNITY_BUNDLE_VERSION_MILE + 1)).00.00"
      elif [[ $UCI_VAR_VERSION_CHANGE == "feat" ]];
      then
        UCI_VAR_UNITY_BUNDLE_VERSION_NEW="$UCI_VAR_UNITY_BUNDLE_VERSION_MILE.$(printf '%02d\n' "$(($UCI_VAR_UNITY_BUNDLE_VERSION_FEAT + 1))").00"
      else
        UCI_VAR_UNITY_BUNDLE_VERSION_NEW="$UCI_VAR_UNITY_BUNDLE_VERSION_MILE.$UCI_VAR_UNITY_BUNDLE_VERSION_FEAT.$(printf '%02d\n' "$(($UCI_VAR_UNITY_BUNDLE_VERSION_FIX + 1))")"
      fi
      
      UCI_VAR_UNITY_BUNDLE_VERSION_ANDROID=$(awk 'match($0,/AndroidBundleVersionCode: [^ ]*/){ print substr($0, RSTART + 26, RLENGTH)}' < $UCI_VAR_PROJECT_SETTINGS_PATH)
      
      if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s/bundleVersion: $UCI_VAR_UNITY_BUNDLE_VERSION/bundleVersion: $UCI_VAR_UNITY_BUNDLE_VERSION_NEW/g" $UCI_VAR_PROJECT_SETTINGS_PATH
        sed -i '' "s/AndroidBundleVersionCode: $UCI_VAR_UNITY_BUNDLE_VERSION_ANDROID/AndroidBundleVersionCode: $(($UCI_VAR_UNITY_BUNDLE_VERSION_ANDROID + 1))/g" $UCI_VAR_PROJECT_SETTINGS_PATH
      else
        sed -i "s/bundleVersion: $UCI_VAR_UNITY_BUNDLE_VERSION/bundleVersion: $UCI_VAR_UNITY_BUNDLE_VERSION_NEW/g" $UCI_VAR_PROJECT_SETTINGS_PATH
        sed -i "s/AndroidBundleVersionCode: $UCI_VAR_UNITY_BUNDLE_VERSION_ANDROID/AndroidBundleVersionCode: $(($UCI_VAR_UNITY_BUNDLE_VERSION_ANDROID + 1))/g" $UCI_VAR_PROJECT_SETTINGS_PATH
      fi
      
      ssh-keyscan -p $CI_SERVER_SHELL_SSH_PORT $CI_SERVER_SHELL_SSH_HOST >> ~/.ssh/known_hosts
      echo "$CI_GIT_SSH_PRIVATE_KEY" > gitlab-ci
      chmod 600 gitlab-ci
      git config user.email "$CI_GIT_USER_EMAIL"
      git config user.name "$CI_GIT_USER_USERNAME"
      git remote remove ssh_origin || true
      git remote add ssh_origin "ssh://git@$CI_SERVER_SHELL_SSH_HOST:$CI_SERVER_SHELL_SSH_PORT/$CI_PROJECT_PATH.git"
      git tag $UCI_VAR_UNITY_BUNDLE_VERSION_NEW
      git -c core.sshCommand="ssh -o IdentitiesOnly=yes -i gitlab-ci" push --tags ssh_origin
      git commit -m '[skip ci]chore: bump version' $UCI_CFG_PROJECT_PATH/ProjectSettings/ProjectSettings.asset
      git -c core.sshCommand="ssh -o IdentitiesOnly=yes -i gitlab-ci" push ssh_origin HEAD:$CI_COMMIT_BRANCH
  dependencies: []
  tags:
    - Unity
  
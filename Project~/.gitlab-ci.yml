stages:
  - prepare
  - test
  - build
  - deploy

variables:
  UCI_BUILD_CACHE_PATH: BuildCache
  UCI_BUILD_PATH: Build
  
.job: &job
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /\b("$UCI_JOB_CONDITION_BRANCHES")\b/'

.unity: &unity
  <<: *job
  before_script:
    - if [ -z "$UCI_PROJECT_UNITY_VERSION" ]; then UCI_PROJECT_UNITY_VERSION=$(awk '{for(i=1;i<=NF;i++){if($i~/([0-9A-Za-z]+(\.[0-9A-Za-z]+)+)/) {print $i;exit;}}}' ./ProjectSettings/ProjectVersion.txt); fi
    - echo "$UCI_PROJECT_UNITY_VERSION"
    - if [ -z "$UCI_PROJECT_UNITY_VERSION_CHANGESET" ]; then UCI_PROJECT_UNITY_VERSION_CHANGESET=$(awk '{for(i=1;i<=NF;i++){if($i~/\([0-9A-Za-z]+\)/) {print substr($i, 2, length($i)-2)}}}' ./ProjectSettings/ProjectVersion.txt); fi
    - UCI_UNITY_EDITOR_PATH=$("$UCI_UNITY_HUB_PATH" -- --headless editors -i | awk -v ver="$UCI_PROJECT_UNITY_VERSION" '$0~ver{print}' | awk 'match($0,/installed at [^ ]*/){ print substr($0, RSTART + 13, RLENGTH)}')
    - if [ -z "$UCI_UNITY_EDITOR_PATH" ]; then "$UCI_UNITY_HUB_PATH" -- --headless install --version "$UCI_PROJECT_UNITY_VERSION" --changeset "$UCI_PROJECT_UNITY_VERSION_CHANGESET"; fi
    - if [ -z "$UCI_UNITY_EDITOR_PATH" ]; then UCI_UNITY_EDITOR_PATH=$("$UCI_UNITY_HUB_PATH" -- --headless editors -i | awk -v ver="$UCI_PROJECT_UNITY_VERSION" '$0~ver{print}' | awk 'match($0,/installed at [^ ]*/){ print substr($0, RSTART + 13, RLENGTH)}'); fi
    - if [ -n "$UCI_UNITY_MODULE" ]; then "$UCI_UNITY_HUB_PATH" -- --headless install-modules --version "$UCI_PROJECT_UNITY_VERSION" "${UCI_UNITY_MODULE[@]/#/--module }" --cm; fi
    - echo "$UCI_UNITY_EDITOR_PATH" > editor_path.txt
    - '"$UCI_UNITY_EDITOR_PATH"/"$UCI_UNITY_EXECUTABLE" -projectPath $pwd -batchmode -silent-crashes
          -logFile unity.log
          $UCI_LICENSE_CREDENTIALS 
          $UCI_LICENSE_SERIAL
          $UCI_JOB_ARGUMENTS'
  after_script:
    - UCI_UNITY_EDITOR_PATH=$(cat editor_path.txt)
    - if [ -n "${UCI_RETURN_LICENSE}" ]; then "$UCI_UNITY_EDITOR_PATH"/"$UCI_UNITY_EXECUTABLE" -quit -batchmode $UCI_LICENSE_CREDENTIALS -returnlicense -logFile -; fi 

.build: &build
  <<: *unity
  stage: build
  variables:
    UCI_JOB_ARGUMENTS: '
    -quit
    -executeMethod Editor.UnityCiHelper.CiJob.Execute 
    -ciJobType "$UCI_JOB_TYPE" 
    "$UCI_JOB_BUILD_ARGUMENTS"'
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$UCI_UNITY_TARGET"
    paths:
      - "Library"
      - "$UCI_BUILD_CACHE_PATH/$CI_JOB_NAME"
    when: 'always'
  script:
    - mkdir -p "$UCI_BUILD_PATH"/"$CI_JOB_NAME"
    - mv "$UCI_BUILD_CACHE_PATH"/"$CI_JOB_NAME"/"$UCI_BUILD_NAME" "$UCI_BUILD_PATH"/"$CI_JOB_NAME"
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - unity.log
      - assetSizeReport.txt
      - "$UCI_BUILD_PATH/$CI_JOB_NAME/*"

#--------------
#UnityCiWizard.Editor.Jobs.SemanticVersionJob
Version Update:
  <<: *unity
  stage: after_build
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-SEMVER"
    paths:
      - "Library"
    when: 'always'
  script:
    - if [ ! -f bundle_version.txt ]; then exit 0; fi
    - UCI_SEMANTIC_VERSION=$(cat bundle_version.txt)
    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - echo "$CI_GIT_SSH_PRIVATE_KEY" > gitlab-ci
    - chmod 600 gitlab-ci
    - git config user.email "$CI_GIT_USER_EMAIL"
    - git config user.name "$CI_GIT_USER_USERNAME"
    - git remote remove ssh_origin || true
    - git remote add ssh_origin "ssh://git@$CI_SERVER_HOST:${CI_SERVER_SSH_PORT:-22}/$CI_PROJECT_PATH.git"
    - 'git commit ProjectSettings/ProjectSettings.asset -m "[skip ci]chore: bump version to $UCI_SEMANTIC_VERSION"'
    - git -c core.sshCommand="ssh -o IdentitiesOnly=yes -i gitlab-ci" push ssh_origin HEAD:$CI_COMMIT_BRANCH
    - git tag $UCI_SEMANTIC_VERSION
    - git -c core.sshCommand="ssh -o IdentitiesOnly=yes -i gitlab-ci" push --tags ssh_origin
  variables:
    UCI_JOB_ARGUMENTS: '
    -quit
    -executeMethod Editor.UnityCiHelper.CiJob.Execute
    -ciJobType UnityCiWizard.Editor.Jobs.SemanticVersionJob
    -jobName "$CI_JOB_NAME"
    -jobCommitTitle "$CI_COMMIT_TITLE"'
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_success
    paths:
      - ProjectSettings/ProjectSettings.asset
      - bundle_version.txt
      - unity.log
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /\b(main|develop)\b/'
  tags:
    - Unity
  

#--------------
#UnityCiWizard.Editor.Jobs.ExtractAndroidKeystoreJob
Extract Android Keystore:
  stage: prepare
  script:
    - echo -n "$UCI_ANDROID_KEYSTORE" | base64 -d > ci.keystore
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_success
    paths:
      - ci.keystore
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /\b(main|develop)\b/'
  tags:
    - Unity
    - Android
  

#--------------
#UnityCiWizard.Editor.Jobs.Build.AndroidApkBuildJob
Test APK:
  <<: *build
  variables:
    UCI_JOB_CONDITION_BRANCHES: main
    UCI_UNITY_MODULE: android
    UCI_BUILD_NAME: "UnityCiWizardTest.apk"
    UCI_JOB_ARGUMENTS: '
      -buildTarget Android
      -executeMethod Editor.UnityCiHelper.CiJob.Execute 
      -ciJobType "UnityCiWizard.Editor.Jobs.Build.AndroidApkBuildJob" 
      -jobName "$CI_JOB_NAME" 
      -jobOptions 0 
      -jobBuildPath "$UCI_BUILD_CACHE_PATH/$CI_JOB_NAME/$UCI_BUILD_NAME"
      -jobKeyStore "ci.keystore"
      -jobKeyAlias "$UCI_ANDROID_KEYSTORE_ALIAS"
      -jobKeyStorePass "$UCI_ANDROID_KEYSTORE_PASS"
      -jobKeyAliasPass "$UCI_ANDROID_KEYSTORE_ALIAS_PASS"'
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /\b(main|develop)\b/'
  tags:
    - Unity
    - Android